plugins {
    id 'application'
    id 'eclipse'
    id 'org.javamodularity.moduleplugin' version '1.8.10'
    id 'life.expert.archidoc' version '1.0.11'
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
modularity.improveEclipseClasspathFile()

repositories {
    mavenCentral()
    google()
}

dependencies {
    configurations.implementation.canBeResolved = true

    testImplementation 'com.ginsberg:junit5-system-exit:1.1.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

application {
    mainModule = moduleName
    mainClassName = 'cyou.obliquerays.media.RadioRecProcess'
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
    withSourcesJar()
    withJavadocJar()
}

jar {
    version = buildMajor + '.' + buildMinor + '.' + buildRevision
    manifest {
        attributes('Name': 'cyou.obliquerays.media')
        attributes('Specification-Title': project.name)
        attributes('Specification-Version': version)
        attributes('Specification-Vendor': 'cyou.obliquerays')
        attributes('Implementation-Title': project.name)
        attributes('Implementation-Version': version)
        attributes('Implementation-Vendor': 'cyou.obliquerays')
        attributes('Automatic-Module-Name': moduleName)
        attributes('Main-Class': 'cyou.obliquerays.media.RadioRecProcess')
    }
    doLast {
        file('gradle/release').mkdirs()
        delete {
            delete files('gradle/release')
        }
        copy {
            from configurations.implementation
            into 'gradle/release'
        }
        copy{
            from jar
            into 'gradle/release'
        }
        def currentRevision = buildRevision.toInteger() + 1
        def File propsFile = file('gradle.properties')
        if (propsFile.canWrite()) {
            def Properties props = new Properties()
            props.load(new FileReader(propsFile))
            props['buildRevision'] = currentRevision.toString()
            props.store(propsFile.newWriter(), null)
        }
    }
}

tasks.withType(Javadoc) {
    failOnError = false
    options {
        memberLevel = JavadocMemberLevel.PRIVATE
        encoding = 'UTF-8'
        links('https://docs.oracle.com/javase/jp/17/docs/api/')
    }
}

compileTestJava {
//    onlyIf { project.hasProperty('goTest') }
    options.compilerArgs << '-Xlint:unchecked'
    moduleOptions {
        compileOnClasspath = true
    }
}

test {
    onlyIf { project.hasProperty('goTest') }
    testLogging.showStandardStreams = true
    moduleOptions {
        runOnClasspath = true
    }
    useJUnitPlatform()
}

archidoc {
    file "${project.projectDir}/doc/dot/classdiagram.dot"
    packages = ['cyou.obliquerays']
    enableAllInfo()
    enableInterClassDependencies()
    enableExternalClasses()
}
